<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://freeshadowrocket.github.io/news/article-80432.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>@RequestMapping注解最详细解析</title>
        <meta name="description" content="文章目录  二、@RequestMapping注解最详细解析   2.1 @RequestMapping简介 2.2 @RequestMapping的各个属性   2.2.1 value属性 2.2." />
        <link rel="icon" href="/assets/website/img/freeshadowrocket/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="FreeShadowrocket免费机场官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://freeshadowrocket.github.io/news/article-80432.htm" />
    <meta property="og:site_name" content="FreeShadowrocket免费机场官网" />
    <meta property="og:title" content="@RequestMapping注解最详细解析" />
    <meta property="og:image" content="https://freeshadowrocket.github.io/uploads/20240808/047af31d8c23ba140291cc63abfe7ece.webp" />
        <meta property="og:release_date" content="2025-03-24T08:21:10" />
    <meta property="og:updated_time" content="2025-03-24T08:21:10" />
        <meta property="og:description" content="文章目录  二、@RequestMapping注解最详细解析   2.1 @RequestMapping简介 2.2 @RequestMapping的各个属性   2.2.1 value属性 2.2." />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="@RequestMapping注解最详细解析">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Montserrat:300,400,500,600,700" rel="stylesheet">
    <!-- Vendor CSS Files -->
    <link href="/assets/website/js/frontend/freeshadowrocket/aos/aos.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freeshadowrocket/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freeshadowrocket/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freeshadowrocket/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freeshadowrocket/swiper/swiper-bundle.min.css" rel="stylesheet">
    <!-- Template Main CSS File -->
    <link href="/assets/website/css/freeshadowrocket/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-8M2D9T3E49"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-8M2D9T3E49');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- ======= Header ======= -->
    <header id="header" class="fixed-top d-flex align-items-center header-transparent">
        <div class="container d-flex align-items-center">
            <a href="/">
                        <span class="logo me-auto">Free Shadowrocket</span>
                        </a>
            <!-- Uncomment below if you prefer to use an image logo -->
            <!-- <a href="index.html" class="logo me-auto"><img src="/assets/website/img/freeshadowrocket/logo.png" alt="" class="img-fluid"></a>-->
            <nav id="navbar" class="navbar order-last order-lg-0">
                <ul>
                                        <li><a class="nav-link" href="/">首页</a></li>
                                        <li><a class="nav-link" href="/free-nodes/">免费节点</a></li>
                                        <li><a class="nav-link" href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a class="nav-link" href="/client.htm">客户端</a></li>
                                        <li><a class="nav-link" href="/news/">新闻资讯</a></li>
                                    </ul>
                <i class="bi bi-list mobile-nav-toggle"></i>
            </nav><!-- .navbar -->
        </div>
    </header><!-- End Header -->
    <main id="main">
        <!-- ======= Breadcrumbs ======= -->
        <section id="breadcrumbs" class="breadcrumbs">
            <div class="container">
                <ol>
                    <li><a href="/">首页</a></li>
                    <li><a href="/news/">新闻资讯</a></li>
                    <li>正文</li>
                </ol>
                <h1>@RequestMapping注解最详细解析</h1>
            </div>
        </section><!-- End Breadcrumbs -->
        <!-- ======= Features Section ======= -->
        <section id="features" class="features">
            <div class="container" data-aos="fade-up">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <div class="toc"> <h3>文章目录</h3> <ul> <li><a href="#RequestMapping_1" rel="nofollow">二、@RequestMapping注解最详细解析</a></li> <li> <ul> <li><a href="#21_RequestMapping_2" rel="nofollow">2.1 @RequestMapping简介</a></li> <li><a href="#22_RequestMapping_106" rel="nofollow">2.2 @RequestMapping的各个属性</a></li> <li> <ul> <li><a href="#221_value_107" rel="nofollow">2.2.1 value属性</a></li> <li><a href="#222_method_124" rel="nofollow">2.2.2 method属性</a></li> <li><a href="#223_params_168" rel="nofollow">2.2.3 params属性（了解）</a></li> <li><a href="#224_headers_196" rel="nofollow">2.2.4 headers属性（了解）</a></li> </ul> </li> <li><a href="#23_SpringMVCant_235" rel="nofollow">2.3 SpringMVC支持ant风格的路径</a></li> <li><a href="#24_SpringMVC_274" rel="nofollow">2.4 SpringMVC支持路径中的占位符（重点）</a></li> </ul> </li> </ul> </div> </h1> <h2><a id="21_RequestMapping_2" rel="nofollow"></a>2.1 @RequestMapping简介</h2> <p>作用：将请求和处理请求的控制器方法关联起来，建立映射关系。<br /> 位置：<br /> 1、标识类：设置映射请求的请求路径的初始信息<br /> 2、表示方法：设置映射请求的请求路径的具体信息</p> <p>来一个标识类的代码实例吧：<br /> 先随便写个html文件，比如我写了一个叫demo.html</p> <pre><code class="prism language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span><span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span><span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>Demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></code></pre> <p>然后再写一个Controller类：</p> <pre><code class="prism language-java"><span class="token keyword">package</span><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/demo"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">DemoController</span><span class="token punctuation">{<!-- --></span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/demo1"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">toDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token string">"demo"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>此时，我们就整了个servlet的路径是<br /><strong>http://localhost:端口号/项目名称/demo/demo1</strong><br /> 他对应的显示页面是视图前缀（/WEB-INF/templates/）/demo/视图后缀（.html）<br /> 所以，我们打开服务器后，访问这个servlet如下：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220828/1fe3f68f0a03872d81ee1d6e4fb23cf8.jpg" alt="@RequestMapping注解最详细解析"><br /> 为了更好地理解，我们顺便改一下index.html文件如下（添加访问demo页面的超链接）：</p> <pre><code class="prism language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span><span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span><span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>HelloWorld!!!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--         @{}是thymeleaf的语法，这么写的好处是当项目路径改了，我们也可以通过他直接定位到绝对路径         如果不这么写的话，就得写href="/mvcDemo/other"     --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/other}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>访问其他页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/demo/demo1}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>访问Demo页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></code></pre> <p>重新部署服务器并打开：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220828/87f0aa3a3d9e91c43ca3f9e268997de5.jpg" alt="@RequestMapping注解最详细解析"><br /> 点击访问Demo页面，会跳转到以下页面<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220828/28f8f49c958ef2d468a0e55205db1314.jpg" alt="@RequestMapping注解最详细解析"><br /> 返回上一页，我们按F12，也可以看到：<br /> 他的超链接指向的是/demo/demo1<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220828/1959ed0b3c658dafd751d6e7830fbd75.jpg" alt="@RequestMapping注解最详细解析"><br /> 那加了这个有啥好处呢？最浅显易懂的好处自然是可以在不同的前缀下有相同的servlet啦。比如，我们有两个都想叫index的Servlet，此时，我们不能将两个index都写成index，否则会报错。这个时候，我们如果一个是user下的index，一个是client下的index那不就解决问题了吗。<br /> Controller的代码如下：<br /> ClientController.java</p> <pre><code class="prism language-java"><span class="token keyword">package</span><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/client"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">ClientController</span><span class="token punctuation">{<!-- --></span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">toIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token string">"clientIndex"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>UserController.java</p> <pre><code class="prism language-java"><span class="token keyword">package</span><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">UserController</span><span class="token punctuation">{<!-- --></span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">toIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token string">"userIndex"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>如果我们把两个类名上面的@RequestMapping(“/user”)和@RequestMapping(“/client”)删掉，重启服务器会报错：（因为他发现有不止一个叫index的servlet）<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220828/5ab32414ead122db3f0f14305a659774.jpg" alt="@RequestMapping注解最详细解析"></p> <h2><a id="22_RequestMapping_106" rel="nofollow"></a>2.2 @RequestMapping的各个属性</h2> <h3><a id="221_value_107" rel="nofollow"></a>2.2.1 value属性</h3> <p>前面，我们使用@RequestMapping注解都是直接在他的括号中加servlet的名称。<br /> 这里解释一下，默认只写一个参数的话，就是给value赋值。<br /> 也就是</p> <blockquote> <p>@RequestMapping(“/hello”)<br /> 等价于<br /> @RequestMapping(value = “/hello”)</p> </blockquote> <p>注意：value属性是一个字符串类型的<strong>数组</strong>，表示请求映射能够匹配多个请求地址所对应的请求。<br /> 假如现在有代码：</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token string">"/other"</span><span class="token punctuation">,</span><span class="token string">"/other2"</span><span class="token punctuation">,</span><span class="token string">"/other3"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">toOther</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token string">"other"</span><span class="token punctuation">;</span></code></pre> <p>那么访问other、other2、other3这三个servlet都可以导向other页面。</p> <h3><a id="222_method_124" rel="nofollow"></a>2.2.2 method属性</h3> <p>method属性通过请求的请求方式（get或post）匹配请求映射。他也是一个<strong>数组</strong>，但是是RequestMethod类的数组，表示请求映射能够匹配多种请求方式的请求。</p> <p><strong>注意：直接打开网页的请求方式是GET。</strong></p> <p>当你设置了method属性之后，如果当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，则浏览器会报错405（Request method ‘POST’ not support）<br /> 如果不设置method属性，那么无论是GET还是POST都可以打开我们的servlet。</p> <p>所以，我们现在给我们的HelloController.java代码改为：</p> <pre><code class="prism language-java"><span class="token keyword">package</span><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMethod</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">HelloController</span><span class="token punctuation">{<!-- --></span><span class="token comment">/*添加请求方式必须为POST请求*/</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">)</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">toIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">/*返回视图名称,刚才配置文件会自己给他加前缀/WEB-INF/templates/和后缀.html*/</span><span class="token keyword">return</span><span class="token string">"index"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token string">"/other"</span><span class="token punctuation">,</span><span class="token string">"other2"</span><span class="token punctuation">,</span><span class="token string">"other3"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">toOther</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token string">"other"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>重启服务器，会发现，被拦住了！！！<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220828/abf8d717c4b06c8fdffd89202b100975.jpg" alt="@RequestMapping注解最详细解析"><br /> 知识点：<br /> 1、对于处理指定请求方式的控制器方法，SpringMVC中提供了@RequestMapping的派生注解：<br /><strong>处理get请求的映射 —&gt; @GetMapping<br /> 处理post请求的映射 —&gt; @PostMapping<br /> 处理put请求的映射 —&gt; @PutMapping<br /> 处理delete请求的映射 —&gt; @DeleteMapping</strong></p> <p>2、常用的请求方式有get、post、put、delete<br /> 但是目前浏览器只支持get和post，若在form表单提交的时候，为method设置了其他请求方式（put或delete），则默认按照get的请求方式处理。<br /> 若要发送put和delete请求，则需要通过spring提供的过滤器HiddenHttpMethodFilter（后边会有专门的博客讲解）。</p> <h3><a id="223_params_168" rel="nofollow"></a>2.2.3 params属性（了解）</h3> <p>params属性通过请求的请求参数匹配请求映射。params属性也是一个字符串类型的<strong>数组</strong>，可以通过以下四种表达式设置请求参数和请求映射的匹配关系：<br /> 1、“param”：表示要求请求映射所匹配的请求必须携带param请求参数<br /> 2、“!param”：表示要求请求映射所匹配的请求不能携带param请求参数<br /> 3、“param=value”：表示要求请求映射所匹配的请求必须携带param请求参数且param=value<br /> 4、“param!=value”：表示要求请求映射所匹配的请求必须携带param请求参数且param!=value</p> <p>废话不多说，代码来一波：<br /> 先修改HelloController.java类中的toOther方法头上 的注释如下。</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>             value<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token string">"/other"</span><span class="token punctuation">,</span><span class="token string">"other2"</span><span class="token punctuation">,</span><span class="token string">"other3"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             method<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">,</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">}</span><span class="token punctuation">,</span>             params<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token string">"username=Keeling"</span><span class="token punctuation">,</span><span class="token string">"password!=123456"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">toOther</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token string">"other"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>然后重启服务器：<br /> 此时点击访问其他页面已经无法成功访问了，因为他没有username和password参数。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220828/06b83ae6e53f4a1b4ddb2e68b087f188.jpg" alt="@RequestMapping注解最详细解析"><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220828/7b3ae2aef6ab5092074d7e80b93cbb4c.jpg" alt="@RequestMapping注解最详细解析"><br /> 这个时候要想访问就得把username和password给他（记住username<strong>必须是</strong> Keeling，password<strong>必须不是</strong> 123456）<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220828/5f2a9923b3131791c3d36549951dda90.jpg" alt="@RequestMapping注解最详细解析"></p> <p>如果password=123456，则<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220828/7db55e193862f567f1c362ab4cab043b.jpg" alt="@RequestMapping注解最详细解析"></p> <h3><a id="224_headers_196" rel="nofollow"></a>2.2.4 headers属性（了解）</h3> <p>headers属性通过请求的请求头信息匹配请求映射。他也是一个字符串类型的数组，可以通过以下四种表达式设置请求头信息和请求映射的匹配关系：<br /> 1、“header”：表示请求映射所匹配的请求必须携带header请求头信息<br /> 2、“!header”：表示请求映射所匹配的请求必须携带header请求头信息<br /> 3、“header=value”：表示请求映射所匹配的请求必须携带header请求头信息，且请求头信息header = value<br /> 4、“header!=value”：表示请求映射所匹配的请求必须携带header请求头信息，且请求头信息header != value</p> <p><strong>注意：若当前请求满足value和method属性，但是不满足headers属性，此时页面显示404错误（资源未找到）。</strong></p> <p>代码招来！！！</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>             value<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token string">"/other"</span><span class="token punctuation">,</span><span class="token string">"other2"</span><span class="token punctuation">,</span><span class="token string">"other3"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             method<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">,</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">}</span><span class="token punctuation">,</span>             params<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token string">"username=Keeling"</span><span class="token punctuation">,</span><span class="token string">"password!=123456"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             headers<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token string">"Connection=keep-alive"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">toOther</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token string">"other"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>重启服务器后，我们再次进入other页面成功<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220828/0089022cbaa18c51d61f509b5d141d5d.jpg" alt="@RequestMapping注解最详细解析"><br /> 如果，我们把代码改为：</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>             value<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token string">"/other"</span><span class="token punctuation">,</span><span class="token string">"other2"</span><span class="token punctuation">,</span><span class="token string">"other3"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             method<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">,</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">}</span><span class="token punctuation">,</span>             params<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token string">"username=Keeling"</span><span class="token punctuation">,</span><span class="token string">"password!=123456"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             headers<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token string">"Connection=keep"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">toOther</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token string">"other"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>重启服务器，再次打开other页面就是这番景象了：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220828/7eda0fb9a7bd7b7668dde301376362fd.jpg" alt="@RequestMapping注解最详细解析"></p> <h2><a id="23_SpringMVCant_235" rel="nofollow"></a>2.3 SpringMVC支持ant风格的路径</h2> <p>ant风格的路径是什么意思，你可以理解为是一种模糊的路径。<br /> 简单说就是：<br /> 使用ant风格，那么<br /> ? 表示任意的单个字符<br /> * 表示任意的0个或多个字符<br /> ** 表示任意的一层或多层目录</p> <p><strong>注意：在使用**时， 只能使用/**/xxx 的方式</strong></p> <p>直接来一波代码：</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"h?h/*"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">toDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token string">"demo"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>重启一下服务器：<br /> 此时输入hbh/成功跳转（这个/是必须要的）<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220828/7f87e4ef5f6338dfd40f4b7d525c5f36.jpg" alt="@RequestMapping注解最详细解析"><br /> 这种乱输入的也可以（但是前面h和h之间只能有一个字符）<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220828/2266c1e5c3ea5205fc39ad4137889b04.jpg" alt="@RequestMapping注解最详细解析"><br /> 为了证明?真的啥字符都行，我特地用了中文的感叹号，看下图<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220828/7e0cefe1c349692730a49202a7e8e9c8.jpg" alt="@RequestMapping注解最详细解析"><br /> 再来一段这个代码：（注意：两个*的）</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"**/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">toDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token string">"demo"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>重启服务器：<br /> 直接用hello行<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220828/1254d2b161de1bd26026293b2ae3cc08.jpg" alt="@RequestMapping注解最详细解析"><br /> 乱打再加hello也行<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220828/a769d306c13b12af0149b8d175dc02f3.jpg" alt="@RequestMapping注解最详细解析"><br /> 注意：两个*的前后不可以乱加东西，不然就不是任意目录了。比如/a**b，就是两个单独的*的意思，跟一个*的效果一样。</p> <h2><a id="24_SpringMVC_274" rel="nofollow"></a>2.4 SpringMVC支持路径中的占位符（重点）</h2> <p>对于传参的方式，我们原始的做法是：</p> <blockquote> <p>/login?username=Keeling&amp;password=123456</p> </blockquote> <p>但是我们其实还有一种rest传参的做法：</p> <blockquote> <p>/login/Keeling/123456</p> </blockquote> <p>SpringMVC路径中的占位符常用于restful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以再对于的@RequestMapping注解的value属性中通过占位符<strong>{xxx}</strong> 表示传输的数据，在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参。</p> <p>讲几句人话吧，分几个步骤讲<br /> 1、首先是在@RequestMapping中用 {what} 占位<br /> 2、然后在方法的参数中用<code>@PathVariable("what") 什么类型 变量名</code> 来拿这个参数。</p> <p>看不太懂我的所谓的“人话”的话，结合以下代码一看便知，就是这么神奇。</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/demo/{username}/{password}"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token class-name">String</span> username<span class="token punctuation">,</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token class-name">String</span> password<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"username = "</span><span class="token operator">+</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"password = "</span><span class="token operator">+</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token string">"demo"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>重启服务器输入网址：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220828/a81de627439ec0785b01825d2a94274f.jpg" alt="@RequestMapping注解最详细解析"><br /> 命令框显示如下：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220828/56264fd37d95372c102b1880594f4564.jpg" alt="@RequestMapping注解最详细解析"><br /> 如果不写密码，那么会报错<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220828/60b8c843d1567405eebf6053dd784e3e.jpg" alt="@RequestMapping注解最详细解析"><br /> 字符串类型太常见，太好用了，我们改一下：</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/demo/{username}/{password}"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token class-name">String</span> username<span class="token punctuation">,</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token class-name">Integer</span> password<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"username = "</span><span class="token operator">+</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"password = "</span><span class="token operator">+</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token string">"demo"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>此时密码输入123（纯数字）可以成功访问<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220828/a17555cc3207ba05547020bc511c6ac3.jpg" alt="@RequestMapping注解最详细解析"><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220828/e83c2c8bbc1ba574c37af80a39173979.jpg" alt="@RequestMapping注解最详细解析"><br /> 输入aaa就炸了<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220828/d5424a114b7b48f2ad081fd5c9e74aeb.jpg" alt="@RequestMapping注解最详细解析"><br /> 且控制台不会有任何输出。</p> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-80430.htm">1分钟掌握 Python 函数参数</a></p>
                                        <p>下一个：<a href="/news/article-81159.htm">@Transactional 详解</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-59844.htm" title="动物医院取什么名字好听一点（动物医院牌子）">动物医院取什么名字好听一点（动物医院牌子）</a></li>
                        <li class="py-2"><a href="/news/article-58125.htm" title="Nodejs对数据库的增删改查">Nodejs对数据库的增删改查</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-2-node-share-links.htm" title="「2月2日」最高速度19.8M/S，2025年Shadowrocket/V2ray/Clash/SSR每天更新免费订阅地址分享">「2月2日」最高速度19.8M/S，2025年Shadowrocket/V2ray/Clash/SSR每天更新免费订阅地址分享</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-25-free-subscribe-node.htm" title="「1月25日」最高速度18.7M/S，2025年Clash/Shadowrocket/V2ray/SSR每天更新免费订阅地址分享">「1月25日」最高速度18.7M/S，2025年Clash/Shadowrocket/V2ray/SSR每天更新免费订阅地址分享</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-22-free-node-subscribe-links.htm" title="「2月22日」最高速度19.5M/S，2025年Clash/V2ray/Shadowrocket/SSR每天更新免费订阅地址分享">「2月22日」最高速度19.5M/S，2025年Clash/V2ray/Shadowrocket/SSR每天更新免费订阅地址分享</a></li>
                        <li class="py-2"><a href="/news/article-43028.htm" title="动物疫苗的正确使用方法视频教程全集（动物疫苗知识）">动物疫苗的正确使用方法视频教程全集（动物疫苗知识）</a></li>
                        <li class="py-2"><a href="/news/article-47001.htm" title="SpringBoot整合ActiveMQ（入门）">SpringBoot整合ActiveMQ（入门）</a></li>
                        <li class="py-2"><a href="/news/article-54213.htm" title="在小程序当中渲染树">在小程序当中渲染树</a></li>
                        <li class="py-2"><a href="/news/article-55878.htm" title="养猫的属相禁忌（养猫最忌讳属相）">养猫的属相禁忌（养猫最忌讳属相）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-20-node-share.htm" title="「2月20日」最高速度21.4M/S，2025年V2ray/SSR/Clash/Shadowrocket每天更新免费订阅地址分享">「2月20日」最高速度21.4M/S，2025年V2ray/SSR/Clash/Shadowrocket每天更新免费订阅地址分享</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">78</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section><!-- End Features Section -->
    </main><!-- End #main -->
        <!-- ======= Footer ======= -->
    <footer id="footer" class="section-bg">
        <div class="container">
            <div class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                FreeShadowrocket免费机场官网 版权所有 Powered by WordPress
            </div>
        </div>
    </footer><!-- End  Footer -->
    <a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>
    <!-- Vendor JS Files -->
    <script src="/assets/website/js/frontend/freeshadowrocket/jquery-1.9.1.min.js"></script>
    <script src="/assets/website/js/frontend/freeshadowrocket/aos/aos.js"></script>
    <script src="/assets/website/js/frontend/freeshadowrocket/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/freeshadowrocket/isotope-layout/isotope.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/freeshadowrocket/php-email-form/validate.js"></script>
    <script src="/assets/website/js/frontend/freeshadowrocket/purecounter/purecounter.js"></script>
    <script src="/assets/website/js/frontend/freeshadowrocket/swiper/swiper-bundle.min.js"></script>
    <!-- Template Main JS File -->
    <script src="/assets/website/js/frontend/freeshadowrocket/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>